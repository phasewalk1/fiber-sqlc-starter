// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    fname, lname, email, salt, hash
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, fname, lname, email, salt, hash, created_at, updated_at
`

type CreateUserParams struct {
	Fname string `json:"fname"`
	Lname string `json:"lname"`
	Email string `json:"email"`
	Salt  string `json:"salt"`
	Hash  string `json:"hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.Salt,
		arg.Hash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Salt,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, fname, lname, email, salt, hash, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Salt,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    fname = $1,
    lname = $2,
    email = $3,
    updated_at = NOW()
WHERE
    id = $4
RETURNING id, fname, lname, email, salt, hash, created_at, updated_at
`

type UpdateUserParams struct {
	Fname string    `json:"fname"`
	Lname string    `json:"lname"`
	Email string    `json:"email"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Salt,
		&i.Hash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
